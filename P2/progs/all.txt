# hazard detection
ADDIU   $1, $0, 0x0fc1
XORI    $2, $1, 0xff # ex hazard
NOP
ADDU    $3, $2, $2 # mem hazard
NOR     $3, $3, $1 # ex hazard
ORI     $3, $3, 0x1c # both, choose ex

# r1 = 0x00000fc1
# r2 = 0x00000f3e
# r3 = 0xffffe01e

# clear registers
ANDI    $1, $1, 0x00
ANDI    $2, $2, 0x00
ANDI    $3, $3, 0x00

# tests for immediate arithmetic + LUI
ADDIU   $1, $0, 0x8081  # immediate signed extended?
ADDIU   $1, $1, 0x7f80  # overflow if immediates are sign extended
LUI     $2, 0xffff
ANDI    $3, $2, 0xffff  # imm zero extended?
LUI     $2, 0xf0f0
ORI     $4, $2, 0xf0f0  # imm zero extended?
XORI    $5, $2, 0xf000  # imm zero extended?
SLTI    $6, $2, 0x000f  # signed comparison?
SLTIU   $7, $2, 0x000f  # unsigned comparison?

# r1 = 0x00000001
# r2 = 0xf0f00000
# r3 = 0x00000000
# r4 = 0xf0f0f0f0
# r5 = 0xf0f0f000
# r6 = 0x00000001
# r7 = 0x00000000

# clear registers
ANDI    $1, $1, 0x00
ANDI    $2, $2, 0x00
ANDI    $3, $3, 0x00
ANDI    $4, $4, 0x00
ANDI    $5, $5, 0x00
ANDI    $6, $6, 0x00
ANDI    $7, $7, 0x00

# movn and movz tests
LUI     $1, 0x7ad2
ADDIU   $1, $1, 0xb36c # load some big number into r1
SUBU    $2, $1, $1     # mystery number! is it zero?
MOVZ    $3, $1, $2
MOVN    $4, $1, $2

# r1 = 0x7ad1b36c
# r2 = 0x00000000
# r3 = 0x7ad1b36c
# r4 = 0x00000000

# clear registers
ANDI    $1, $1, 0x00
ANDI    $2, $2, 0x00
ANDI    $3, $3, 0x00
ANDI    $4, $4, 0x00

# register arithmetic
ADDIU   $1, $0, 0x7081
ADDU    $2, $1, $1      # can  we add?
ADDU    $3, $2, $1
LUI     $1, 0xffff
ADDIU   $1, $1, 0xffff
ADDU    $4, $1, $3      # test wrap around
SUBU    $5, $1, $3      # can we subtract?
SUBU    $6, $5, $5
AND     $7, $1, $3      # can we logic?
OR      $8, $7, $2
XOR     $9, $8, $7
NOR     $10, $8, $7
SLT     $11, $9, $5     # test unsigned vs. signed comparison
SLTU    $12, $9, $5

# r1  = 0xfffeffff
# r2  = 0x0000e102
# r3  = 0x00015183
# r4  = 0x00005182
# r5  = 0xfffdae7c
# r6  = 0x00000000
# r7  = 0x00005183
# r8  = 0x0000f183
# r9  = 0x0000a000
# r10 = 0xffff0e7c
# r11 = 0x00000000
# r12 = 0x00000001

# clear registers
ANDI    $1,  $1,  0x00
ANDI    $2,  $2,  0x00
ANDI    $3,  $3,  0x00
ANDI    $4,  $4,  0x00
ANDI    $5,  $5,  0x00
ANDI    $6,  $6,  0x00
ANDI    $7,  $7,  0x00
ANDI    $8,  $8,  0x00
ANDI    $9,  $9,  0x00
ANDI    $10, $10, 0x00
ANDI    $11, $11, 0x00
ANDI    $12, $12, 0x00

# Shift testing
ADDIU   $1, $0, 0x00aa
SLL     $2, $1, 0x1e    # shift left by a few different amounts
SLL     $3, $1, 0x00
SLL     $4, $1, 0x04
SRL     $5, $2, 0x08    # shift right logical, front of result should be zeros
SRA     $6, $2, 0x04    # shift right arithmetic, front of result should be ones
SRA     $7, $4, 0x02    # shift right arithmetic, front of result should be zeros
SLLV    $8, $1, $3      # test variable shifting
SRLV    $9, $2, $3
SRAV    $10, $2, $3
SRAV    $11, $4, $3

# r1  = 0x000000aa
# r2  = 0x80000000
# r3  = 0x000000aa
# r4  = 0x00000aa0
# r5  = 0x00800000
# r6  = 0xf8000000
# r7  = 0x000002a8
# r8  = 0x0002a800
# r9  = 0x00200000
# r10 = 0xffe00000
# r11 = 0x00000002

# clear registers
ANDI    $1,  $1,  0x00
ANDI    $2,  $2,  0x00
ANDI    $3,  $3,  0x00
ANDI    $4,  $4,  0x00
ANDI    $5,  $5,  0x00
ANDI    $6,  $6,  0x00
ANDI    $7,  $7,  0x00
ANDI    $8,  $8,  0x00
ANDI    $9,  $9,  0x00
ANDI    $10, $10, 0x00
ANDI    $11, $11, 0x00

# not yet implemented instructions
J       0xdead00
JAL     0xcafe00
JR      $1
JALR    $1, $2
BEQ     $1, $2, 0xbea0
BNE     $2, $1, 0xbee0
BLEZ    $1, 0xdee0
BGTZ    $2, 0xdee0
BLTZ    $1, 0xbee0
BGEZ    $2, 0xfee0
LW      $4, 4($1)
LB      $5, 5($2)
LBU     $3, 3($3)
SW      $6, 6($6)
SB      $7, 8($9)

# no changes to registers
